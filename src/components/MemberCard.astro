---
import { Image } from 'astro:assets';

export interface Props {
  id: string;
  src: string;
  alt?: string;
  extraClasses?: string;
}

const { id, src, alt = 'Twice Member', extraClasses = '' } = Astro.props;
---

<a
  href={`/members/${id}`}
  class={`js-member-card w-12 h-18 xs:w-14 xs:h-20 sm:w-15 sm:h-23 md:w-15 md:h-25 lg:w-21 lg:h-31 group overflow-hidden rounded-s-xl hover:border-2 hover:cursor-pointer hover:border-magenta ${extraClasses}`}
  data-id={id}
  data-extra-classes={extraClasses}
>
  <Image
    src={src}
    class="h-full w-full transition-all duration-300 group-hover:translate-y-5 group-hover:scale-120"
    width={100}
    height={100}
    alt={alt}
    fetchpriority="high"
    loading="eager"
  />
</a>

<script>
  import { $, $$ } from '../utils/dom-selector';

  let timeoutToChangeMember: ReturnType<typeof setTimeout> | null = null;
  let selectedMemberIdMobile: string | null = null;

  const isMobile = () => {
    return window.matchMedia('(max-width: 768px)').matches;
  };

  const extractBgClass = (extraClasses: string) => {
    const match = extraClasses.match(/hover:bg-(\w+)/);
    return match ? `bg-${match[1]}` : '';
  };

  const clearPreviousSelection = () => {
    if (!selectedMemberIdMobile) return;

    const previousCard = $(
      `[data-id="${selectedMemberIdMobile}"]`,
    );
    const previousExtraClasses =
      previousCard?.getAttribute('data-extra-classes') || '';
    const previousBgClass = extractBgClass(previousExtraClasses);
    const previousImage = previousCard
      ? $<HTMLImageElement>('img', previousCard)
      : null;

    previousCard?.classList.remove(
      'border-2',
      'border-magenta',
      previousBgClass,
    );

    previousImage?.classList.remove('translate-y-5', 'scale-120');
  };

  const applySelectionVisual = (card: Element, id: string) => {
    const extraClasses = card.getAttribute('data-extra-classes') || '';
    const bgClass = extractBgClass(extraClasses);
    const image = $<HTMLImageElement>('img', card as HTMLElement);

    card.classList.add('border-2', 'border-magenta', bgClass);

    image?.classList.add('translate-y-5', 'scale-120');
  };

  const triggerHoverEffect = (id: string) => {
    const event = new CustomEvent('member-card-hover', {
      detail: { id },
    });
    document.dispatchEvent(event);
  };

  const handleFirstTap = (e: Event, card: Element, id: string) => {
    e.preventDefault();

    clearPreviousSelection();

    selectedMemberIdMobile = id;
    applySelectionVisual(card, id);

    triggerHoverEffect(id);
  };

  const clearMobileSelection = () => {
    if (!selectedMemberIdMobile) return;

    const selectedCard = $(
      `[data-id="${selectedMemberIdMobile}"]`,
    );
    const extraClasses = selectedCard?.getAttribute('data-extra-classes') || '';
    const bgClass = extractBgClass(extraClasses);
    const selectedImage = selectedCard
      ? $<HTMLImageElement>('img', selectedCard)
      : null;

    selectedCard?.classList.remove('border-2', 'border-magenta', bgClass);

    selectedImage?.classList.remove('translate-y-5', 'scale-120');
    selectedMemberIdMobile = null;

    const event = new CustomEvent('member-card-exit');
    document.dispatchEvent(event);
  };

  const mouseEnterDesktop = (card: Element) => {
    card.addEventListener('mouseenter', () => {
      if (isMobile()) return;

      if (timeoutToChangeMember) {
        clearTimeout(timeoutToChangeMember);
      }

      const id = card.getAttribute('data-id');

      if (id) {
        const event = new CustomEvent('member-card-hover', {
          detail: { id },
        });
        document.dispatchEvent(event);
      }
    });
  };

  const mouseLeaveDesktop = (card: Element) => {
    card.addEventListener('mouseleave', () => {
      if (isMobile()) return;

      timeoutToChangeMember = setTimeout(() => {
        const event = new CustomEvent('member-card-exit');
        document.dispatchEvent(event);
      }, 500);
    });
  };

  const handleMobileTouch = (card: Element) => {
    card.addEventListener('click', (e) => {
      if (!isMobile()) return;

      const id = card.getAttribute('data-id');
      if (!id) return;

      if (selectedMemberIdMobile !== id) {
        handleFirstTap(e, card, id);
        return;
      }
    });
  };

  const handleTouchOutside = (card: Element) => {
    document.addEventListener('touchstart', (e) => {
      if (!isMobile()) return;

      const target = e.target as Element;
      const clickedCard = target.closest('.js-member-card');

      if (!clickedCard && selectedMemberIdMobile) {
        clearMobileSelection();
      }
    });
  };

  const resetMemberSelection = (memberCards: NodeListOf<HTMLElement>) => {
    memberCards?.forEach((card) => {
      const extraClasses = card.getAttribute('data-extra-classes') || '';
      const bgClass = extractBgClass(extraClasses);
      const image = $<HTMLImageElement>('img', card);
      
      card.classList.remove('border-2', 'border-magenta', bgClass);
      image?.classList.remove('translate-y-5', 'scale-120');
    });
  }

  document.addEventListener('astro:page-load', () => {
    const memberCards = $$('.js-member-card');
    selectedMemberIdMobile = null;
    resetMemberSelection(memberCards);

    if (memberCards) {
      memberCards.forEach((card) => {
        mouseEnterDesktop(card);
        mouseLeaveDesktop(card);
        handleMobileTouch(card);
        handleTouchOutside(card);
      });
    }
  })
</script>
