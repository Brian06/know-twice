---
import type { TMusicLink } from '../types/members';
import Youtube from '../assets/music-platforms/youtube.svg';
import YoutubeMusic from '../assets/music-platforms/youtube-music.svg';
import Spotify from '../assets/music-platforms/spotify.svg';
import AppleMusic from '../assets/music-platforms/apple-music.svg';

export interface Props {
  links: TMusicLink[];
  songTitle?: string;
  class?: string;
}

type PlatformType = 'youtube' | 'youtube-music' | 'spotify' | 'appleMusic';

interface PlatformConfig {
  component: any;
  label: string;
}

const { links, songTitle, class: className } = Astro.props;

const platformConfig: Record<PlatformType, PlatformConfig> = {
  'youtube': { component: Youtube, label: 'YouTube' },
  'youtube-music': { component: YoutubeMusic, label: 'YouTube Music' },
  'spotify': { component: Spotify, label: 'Spotify' },
  'appleMusic': { component: AppleMusic, label: 'Apple Music' }
};

const getPlatformLinks = (links: TMusicLink[]): TMusicLink[] => {
  const linksByPlatform = new Map<PlatformType, TMusicLink>();
  
  links.forEach(link => {
    const platform = link.platform as PlatformType;
    if (platformConfig[platform]) {
      linksByPlatform.set(platform, link);
    }
  });
  
  const result: TMusicLink[] = [];
  const youtubeLink = linksByPlatform.get('youtube') || linksByPlatform.get('youtube-music');
  if (youtubeLink) result.push(youtubeLink);
  
  (['spotify', 'appleMusic'] as PlatformType[]).forEach(platform => {
    const link = linksByPlatform.get(platform);
    if (link) result.push(link);
  });
  
  return result;
};

const renderPlatformIcon = (link: TMusicLink) => {
  const platform = link.platform as PlatformType;
  const config = platformConfig[platform];
  if (!config) return null;
  
  return {
    component: config.component,
    label: config.label
  };
};

const platformLinks = getPlatformLinks(links);
---

<div class={`flex gap-2 ${className || ''}`}>
  {platformLinks.map((link) => {
    const iconData = renderPlatformIcon(link);
    if (!iconData) return null;
    
    const { component: IconComponent, label } = iconData;
    const ariaLabel = songTitle 
      ? `Listen to ${songTitle} on ${label}`
      : `Listen on ${label}`;
    
    return (
      <a 
        href={link.url} 
        target="_blank" 
        rel="noopener noreferrer"
        class="inline-flex items-center justify-center w-5 h-5 hover:scale-130 transition-all"
        title={`Listen on ${label}`}
        aria-label={ariaLabel}
      >
        <IconComponent width={18} height={18} />
      </a>
    );
  })}
</div>
